name: Build and push container images to ACR, then deploy services to ACA

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    outputs:
      container-app-env: ${{ steps.setup-env.outputs.container-app-env }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Azure Infrastructure
        id: setup-env
        run: |
          RESOURCE_GROUP="task-mangment-system"
          ACR_NAME="${{ secrets.TASKMANGMENT_ACR_NAME }}"
          LOCATION="uaenorth"
          ENV_NAME="task-mangment-env"

          # Create resource group
          if ! az group show --name $RESOURCE_GROUP &> /dev/null; then
            echo "Creating resource group..."
            az group create --name $RESOURCE_GROUP --location $LOCATION
          fi

          # Create container registry
          if ! az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP &> /dev/null; then
            echo "Creating ACR..."
            az acr create --resource-group $RESOURCE_GROUP --name $ACR_NAME --sku Basic --admin-enabled true
          fi

          echo "container-app-env=$ENV_NAME" >> $GITHUB_OUTPUT
          echo "CONTAINER_APP_ENV=$ENV_NAME" >> $GITHUB_ENV

  # Deploy infrastructure services first
  deploy-zookeeper:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, 'zookeeper') || contains(github.event.head_commit.message, 'infra')
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Zookeeper image
        run: |
          IMAGE="${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-zookeeper:${{ github.sha }}"
          az acr build --registry ${{ secrets.TASKMANGMENT_ACR_NAME }} --image $IMAGE ./docker/zookeeper
      
      - name: Deploy Zookeeper
        run: |
          # Check if container app exists, create if not
          if ! az containerapp show --name task-mangment-zookeeper --resource-group task-mangment-system &> /dev/null; then
            echo "Creating Zookeeper container app..."
            az containerapp create \
              --name task-mangment-zookeeper \
              --resource-group task-mangment-system \
              --environment ${{ needs.build-and-deploy.outputs.container-app-env }} \
              --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-zookeeper:${{ github.sha }} \
              --registry-server ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io \
              --cpu 0.5 \
              --memory 1Gi \
              --min-replicas 1 \
              --max-replicas 1 \
              --target-port 2181 \
              --ingress internal \
              --env-vars ZOOKEEPER_CLIENT_PORT=2181 \
                          ZOOKEEPER_TICK_TIME=2000
          else
            echo "Updating Zookeeper container app..."
            az containerapp update \
              --name task-mangment-zookeeper \
              --resource-group task-mangment-system \
              --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-zookeeper:${{ github.sha }}
          fi

  deploy-kafka:
  runs-on: ubuntu-latest
  needs: [build-and-deploy, deploy-zookeeper]
  steps:
    - uses: actions/checkout@v3
    - uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Build and push Kafka image
      run: |
        IMAGE="${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-kafka:${{ github.sha }}"
        az acr build --registry ${{ secrets.TASKMANGMENT_ACR_NAME }} --image $IMAGE ./docker/kafka
    
    - name: Deploy Kafka
      run: |
        # Get Zookeeper FQDN for internal communication
        ZOOKEEPER_FQDN=$(az containerapp show --name task-mangment-zookeeper --resource-group task-mangment-system --query properties.configuration.ingress.fqdn -o tsv)
        
        if ! az containerapp show --name task-mangment-kafka --resource-group task-mangment-system &> /dev/null; then
          echo "Creating Kafka container app..."
          az containerapp create \
            --name task-mangment-kafka \
            --resource-group task-mangment-system \
            --environment ${{ needs.build-and-deploy.outputs.container-app-env }} \
            --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-kafka:${{ github.sha }} \
            --registry-server ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io \
            --cpu 1.0 \
            --memory 2Gi \
            --min-replicas 1 \
            --max-replicas 1 \
            --target-port 9092 \
            --ingress internal \
            --env-vars KAFKA_ZOOKEEPER_CONNECT="${ZOOKEEPER_FQDN}:2181" \
                        KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \
                        KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://task-mangment-kafka:9092 \
                        KAFKA_BROKER_ID=1 \
                        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
                        KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
        else
          echo "Updating Kafka container app..."
          az containerapp update \
            --name task-mangment-kafka \
            --resource-group task-mangment-system \
            --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-kafka:${{ github.sha }} \
            --env-vars KAFKA_ZOOKEEPER_CONNECT="${ZOOKEEPER_FQDN}:2181" \
                        KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092 \
                        KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://task-mangment-kafka:9092 \
                        KAFKA_BROKER_ID=1 \
                        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
                        KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
        fi

  deploy-redis:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, 'redis') || contains(github.event.head_commit.message, 'infra')
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Redis image
        run: |
          IMAGE="${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-redis:${{ github.sha }}"
          az acr build --registry ${{ secrets.TASKMANGMENT_ACR_NAME }} --image $IMAGE ./docker/redis
      
      - name: Deploy Redis
        run: |
          if ! az containerapp show --name task-mangment-redis --resource-group task-mangment-system &> /dev/null; then
            echo "Creating Redis container app..."
            az containerapp create \
              --name task-mangment-redis \
              --resource-group task-mangment-system \
              --environment ${{ needs.build-and-deploy.outputs.container-app-env }} \
              --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-redis:${{ github.sha }} \
              --registry-server ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io \
              --cpu 0.5 \
              --memory 1Gi \
              --min-replicas 1 \
              --max-replicas 1 \
              --target-port 6379 \
              --ingress internal
          else
            echo "Updating Redis container app..."
            az containerapp update \
              --name task-mangment-redis \
              --resource-group task-mangment-system \
              --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-redis:${{ github.sha }}
          fi

  deploy-app:
    runs-on: ubuntu-latest
    needs: [build-and-deploy, deploy-kafka, deploy-redis]
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, 'app')
    steps:
      - uses: actions/checkout@v3
      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push App image
        run: |
          IMAGE="${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-app:${{ github.sha }}"
          az acr build --registry ${{ secrets.TASKMANGMENT_ACR_NAME }} --image $IMAGE ./app
      
      - name: Deploy App
        run: |
          # Get FQDNs for service discovery
          REDIS_FQDN=$(az containerapp show --name task-mangment-redis --resource-group task-mangment-system --query properties.configuration.ingress.fqdn -o tsv)
          KAFKA_FQDN=$(az containerapp show --name task-mangment-kafka --resource-group task-mangment-system --query properties.configuration.ingress.fqdn -o tsv)
          
          if ! az containerapp show --name task-mangment-app --resource-group task-mangment-system &> /dev/null; then
            echo "Creating App container app..."
            az containerapp create \
              --name task-mangment-app \
              --resource-group task-mangment-system \
              --environment ${{ needs.build-and-deploy.outputs.container-app-env }} \
              --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-app:${{ github.sha }} \
              --registry-server ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io \
              --cpu 1.0 \
              --memory 2Gi \
              --min-replicas 1 \
              --max-replicas 5 \
              --target-port 8080 \
              --ingress external \
              --env-vars SPRING_REDIS_HOST="${REDIS_FQDN}" \
                          SPRING_REDIS_PORT=6379 \
                          KAFKA_BOOTSTRAP_SERVERS="${KAFKA_FQDN}:9092" \
                          SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
                          SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
                          SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
          else
            echo "Updating App container app..."
            az containerapp update \
              --name task-mangment-app \
              --resource-group task-mangment-system \
              --image ${{ secrets.TASKMANGMENT_ACR_NAME }}.azurecr.io/task-mangment-app:${{ github.sha }} \
              --env-vars SPRING_REDIS_HOST="${REDIS_FQDN}" \
                          SPRING_REDIS_PORT=6379 \
                          KAFKA_BOOTSTRAP_SERVERS="${KAFKA_FQDN}:9092" \
                          SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
                          SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
                          SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
          fi